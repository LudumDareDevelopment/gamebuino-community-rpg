#include <SPI.h>
#include <Gamebuino.h>
#include <EEPROM.h>
#include <GB_Fat.h>

#define ENABLE_SOUND 0


#define TILEMAP_WIDTH 12
#define TILEMAP_HEIGHT 8
#define TILE_WIDTH 8
#define TILE_HEIGHT 8
#define TILES_PASSABLE_END 4
#define TILES_ANIMATED_START 4
#define TILES_ANIMATED_END 14
#define ANIMATION_FREQUENCY 500 // ms
#define SOUNDBUFFER_PAGE ((const char*)(231 * 128))
#define SOUNDBUFFER_OFFSET (231 * 128)

#define TILEMAP_SIZE (TILEMAP_WIDTH*TILEMAP_HEIGHT)

byte tileset_forest[]={
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x08,0x00,0x40,0x04,0x00,0x00,
  0x02,0x01,0x48,0x24,0x00,0x04,0x42,0x20,
  0x00,0x24,0x0a,0x04,0x00,0x02,0x40,0x00,
  0x00,0x40,0x10,0x60,0x00,0x40,0x20,0x00,
  0x00,0x40,0x00,0x70,0x00,0x40,0x20,0x00,
  0xff,0xf7,0x7b,0xf7,0xdf,0xef,0xdd,0xff,
  0xff,0xfb,0xbd,0xfb,0xef,0xf7,0xee,0xff,
  0xf0,0xfc,0x7e,0xf6,0xdf,0xef,0xdd,0xff,
  0xf0,0xfc,0xbe,0xfa,0xef,0xf7,0xee,0xff,
  0xff,0xf7,0x7b,0xf7,0xde,0xee,0xdc,0xf0,
  0xff,0xfb,0xbd,0xfb,0xee,0xf6,0xec,0xf0,
  0x0f,0x37,0x7b,0x77,0xdf,0xef,0xdd,0xff,
  0x0f,0x3b,0x7d,0x7b,0xef,0xf7,0xee,0xff,
  0xff,0xf7,0xfb,0xf7,0x5f,0x6f,0x3d,0x0f,
  0xff,0xfb,0xfd,0xfb,0x6f,0x77,0x3e,0x0f,
  0xf8,0xd4,0x6a,0xe2,0xd9,0xf5,0x69,0x95,
  0x03,0x0c,0xdb,0xa5,0x8f,0x47,0xcf,0xaf,
  0xc9,0xa3,0xf5,0xdd,0xea,0x62,0xd4,0xf8,
  0x8f,0xdf,0x57,0x8f,0xa5,0xdb,0x0c,0x03,
  0x00,0x60,0xd0,0xe8,0x74,0xaa,0xc2,0x61,
  0x0e,0x1d,0x1e,0x34,0x3b,0x76,0xb9,0x9d,
  0x81,0x2a,0xe4,0x54,0xe8,0xd0,0x60,0x00,
  0x9a,0xb5,0x7e,0x2f,0x3a,0x17,0x1b,0x0e,
  0xda,0x75,0xde,0xed,0x76,0xa3,0xc3,0x61,
  0xff,0xd7,0x6b,0xe3,0xd9,0xf5,0x69,0x95,
  0x81,0x2b,0xe6,0x57,0xeb,0xd6,0x79,0xdd,
  0xc9,0xa3,0xf5,0xdd,0xeb,0x63,0xd7,0xff };

byte charset_player[]={
  0x87,0x78, 0x87,0x48, 0x01,0xfe, 0x01,0xfe, 0x81,0x7a, 0x01,0xf2, 0x6f,0x90, 0xc0,0x2f,
  0xff,0x00, 0x87,0x78, 0x80,0x4f, 0x00,0xff, 0x00,0xfd, 0x80,0x79, 0xf7,0x08, 0xfb,0x04,
  0xff,0x00, 0xff,0x00, 0x01,0xfe, 0x01,0xce, 0x81,0x7a, 0x01,0xf2, 0x5f,0xa0, 0xdf,0x20,
  0xc0,0x2f, 0x41,0xbe, 0x01,0xfe, 0x81,0x7e, 0x01,0xfe, 0x01,0xfe, 0x87,0x78, 0xff,0x00,
  0xc3,0x2c, 0x40,0xbf, 0x00,0xff, 0x80,0x7f, 0x00,0xff, 0x00,0xff, 0x87,0x78, 0xff,0x00,
  0xdf,0x20, 0x41,0xbe, 0x01,0xfe, 0x81,0x7e, 0x01,0xfe, 0x01,0xfe, 0x87,0x78, 0xff,0x00,
  0xc0,0x2f, 0x6f,0x90, 0x01,0xf2, 0x81,0x7a, 0x01,0xfe, 0x01,0xfe, 0x87,0x48, 0x87,0x78,
  0xfb,0x04, 0xf7,0x08, 0x80,0x79, 0x00,0xfd, 0x00,0xff, 0x80,0x4f, 0x87,0x78, 0xff,0x00,
  0xdf,0x20, 0x5f,0xa0, 0x01,0xf2, 0x81,0x7a, 0x01,0xce, 0x01,0xfe, 0xff,0x00, 0xff,0x00,
  0x87,0x78, 0x01,0xce, 0x01,0xfa, 0x81,0x72, 0x01,0xfa, 0x41,0xbe, 0xc0,0x2f, 0xff,0x00,
  0x87,0x78, 0x00,0xff, 0x00,0xfd, 0x80,0x79, 0x00,0xfd, 0x40,0xbf, 0xc3,0x2c, 0xff,0x00,
  0x87,0x78, 0x01,0xce, 0x01,0xfa, 0x81,0x72, 0x01,0xfa, 0x41,0xbe, 0xdf,0x20, 0xff,0x00};


Gamebuino gb;

byte camX = 0;
byte camY = 0;
byte tilemap[TILEMAP_SIZE];
#include "graphics.h"
GB_Fat sd;
GB_File file;
GB_File soundfile;


void loadSong(uint16_t num){
  gb.sound.stopTrack(0);
  gb.sound.stopTrack(1);
  byte *buf = gb.display.getBuffer();
  soundfile.read(buf, num*1024, 512);
  write_flash_page((const char*)SOUNDBUFFER_OFFSET, buf);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128), buf+128);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*2), buf+128*2);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*3), buf+128*3);
  soundfile.read(buf, num*1024+512, 512);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*4), buf);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*5), buf+128);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*6), buf+128*2);
  write_flash_page((const char*)(SOUNDBUFFER_OFFSET+128*7), buf+128*3);
}

void moveCam(int8_t x,int8_t y){
  if(x < 0){
    camX = 0;
  }else if(x > (TILEMAP_WIDTH*8) - LCDWIDTH){
    camX = (TILEMAP_WIDTH*8) - LCDWIDTH;
  }else{
    camX = x;
  }
  if(y < 0){
    camY = 0;
  }else if(y > (TILEMAP_HEIGHT*8) - LCDHEIGHT){
    camY = (TILEMAP_HEIGHT*8) - LCDHEIGHT;
  }else{
    camY = y;
  }
}


class Player {
  uint8_t x=0,y=0;
  byte direction = 1; // 0 = right, 1 = up, 2 = left, 3 = down
  byte animation = 0;
  public:
    void update(){
      char x_temp = -gb.buttons.repeat(BTN_LEFT, 1)+gb.buttons.repeat(BTN_RIGHT, 1);
      char y_temp = -gb.buttons.repeat(BTN_UP, 1)+gb.buttons.repeat(BTN_DOWN, 1);
      if(x_temp || y_temp){
        direction = (1+x_temp)*(x_temp != 0);
        direction = (2+y_temp)*(y_temp != 0 || direction == 0);
        if(true || TILES_PASSABLE_END-tilemap[(y+y_temp)*TILEMAP_WIDTH+x+x_temp] > 0){
          moveCam(x - (LCDWIDTH / 2), y - (LCDHEIGHT / 2));
          x += x_temp;
          y += y_temp;
          animation = !animation;
        }
      }
    }
    void draw(){
      sprite_masked(charset_player+(direction*24*2+animation*8*2), x, y);
    }
};
Player player;

void setup(){
  // put your setup code here, to run once:
  gb.begin();
  gb.setFrameRate(40);
  gb.display.clear();
  gb.display.println(F("loading card..."));
  gb.display.update();

  if(sd.init(gb.display.getBuffer(), SPISPEED_VERYHIGH) != NO_ERROR){
    gb.display.clear();
    gb.display.print(F("SD card not found."));
    gb.display.update();
    while(1);
  }
  gb.display.clear();
  gb.display.println(F("Searching for file card..."));
  gb.display.update();
  
  soundfile = sd.open("SOUND.DAT", gb.display.getBuffer());
  if(!soundfile.exists()){
    gb.display.clear();
    gb.display.print(F("Couldn't open sound file."));
    gb.display.update();
    while(1);
  }
  file = sd.open("TEST.DAT", gb.display.getBuffer());
  if(!file.exists()){
    gb.display.clear();
    gb.display.print(F("Couldn't open file."));
    gb.display.update();
    while(1);
  }
  loadSong(0);
  gb.display.clear();
  gb.display.println(F("SD card found."));
  gb.display.update();

  file.read(tilemap, 2, TILEMAP_SIZE);
  for(byte i = 0;i < 12;i++){
    tilemap[i] = 0;
  }
  gb.sound.changePatternSet((const uint16_t* const*)(SOUNDBUFFER_OFFSET+80), 0);
  gb.sound.changePatternSet((const uint16_t* const*)(SOUNDBUFFER_OFFSET+80), 1);
  /*
  byte buffer[11];
  buffer[10] = '\0';
  file = sd.open("TEST.TXT", gb.display.getBuffer());
  if(!file.exists()){
    gb.display.clear();
    gb.display.print(F("Couldn't open file."));
    gb.display.update();
    while(1);
  }
  file.read(buffer, 32768-5,10);
  gb.display.clear();
  gb.display.println(reinterpret_cast<const char*>(buffer));
  gb.display.update();while(1);*/
}

void loop(){
  // put your main code here, to run repeatedly:
  if(gb.update()){
    #if ENABLE_SOUND
    if(!gb.sound.trackIsPlaying[0]){
      gb.sound.playTrack((const uint16_t *)(SOUNDBUFFER_OFFSET),0);
      gb.sound.playTrack((const uint16_t *)(SOUNDBUFFER_OFFSET + 40),1);
    }
    #endif
    player.update();
    drawTilemap();
    player.draw();
  }
}
